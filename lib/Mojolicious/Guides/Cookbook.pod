# Copyright (C) 2008-2010, Sebastian Riedel.

=head1 NAME

Mojolicious::Guides::Cookbook - Cookbook

=head1 OVERVIEW

Cooking with L<Mojolicious>, recipes for every taste.

=head1 DEPLOYMENT

Getting L<Mojolicious> and L<Mojolicious::Lite> applications running on
different platforms.

=head2 Builtin Server

L<Mojolicious> contains a very portable HTTP 1.1 compliant web server.
It is usally used during development but is solid and fast enough for small
to mid sized applications.

    % ./script/myapp daemon
    Server available at http://127.0.0.1:3000.

It has many configuration options and is known to work on every platform
Perl works on.

    % ./script/myapp help daemon
    ...List of available options...

Another huge advantage is that it supports WebSockets out of the box.

=head2 Builtin Preforking Server

To allow scaling with CPUs (cores) and to lower the performance loss of
blocking APIs the built in web server also has a preforking multi process
mode that doesn't work on Windows.

    % ./script/myapp daemon_prefork
    Server available at http://127.0.0.1:3000.

By default it will accept one client connection per worker process just like
Apache, but this value can be increased, allowing huge amounts of concurrent
client connections.
(epoll and kqueue will be used automatically if available)

    % ./script/myapp daemon_prefork --clients 100
    Server available at http://127.0.0.1:3000.

=head2 Nginx

One of the most popular setups these days is the builtin preforking web
server behind a Nginx reverse proxy.

    upstream myapp {
        server 127.0.0.1:3000;
    }
    server {
        listen 80;
        server_name localhost;
        location {
            proxy_read_timeout 300;
            proxy_pass http://myapp;
        }
    }

Also possible using UNIX domain sockets.

    upstream myapp {
        server unix:/tmp/myapp.sock;
    }
    server {
        listen 80;
        server_name localhost;
        location {
            proxy_read_timeout 300;
            proxy_pass http://myapp;
        }
    }

The builtin web server of course supports them as well.

    % ./script/myapp daemon_prefork --listen file:///tmp/myapp.sock
    Server available at file:///tmp/myapp.sock.

=head2 Apache/CGI

C<CGI> is supported out of the box and your L<Mojolicious> application will
automatically detect that it is executed as a C<CGI> script.

    <VirtualHost *:80>
        ServerName localhost
        DocumentRoot /home/sri/myapp/public

        ScriptAlias /myapp "/home/sri/myapp/script/myapp"
    </VirtualHost>

=head2 Apache/FastCGI

C<FastCGI> is also supported out of the box and your L<Mojolicious>
application will automatically detect that it is executed as a C<FastCGI>
script.

    <VirtualHost *:80>
        ServerName localhost
        DocumentRoot /home/sri/myapp/public

        <Location /myapp>
            FastCgiIpcDir /tmp
            FastCgiServer /home/sri/myapp/script/myapp -processes 10
        </Location>

    </VirtualHost>

=head2 PSGI/Plack

L<PSGI> is an interface between Perl web frameworks and web servers, and
L<Plack> is a Perl module and toolkit that contains PSGI middleware, helpers
and adapters to web servers.
L<PSGI> and L<Plack> are inspired by Python's WSGI and Ruby's Rack.
L<Mojolicious> applications are ridiculously simple to deploy with L<Plack>.

    % plackup ./script/myapp
    HTTP::Server::PSGI: Accepting connections at http://0:5000/

L<Plack> provides many server and protocol adapters for you to choose from
such as C<FCGI>, C<SCGI> and C<mod_perl>.

    % plackup ./script/myapp -s FCGI -l /tmp/myapp.sock

Because C<plackup> changes C<$0> L<Mojolicious> is not always able to detect
your applications home directory, if thats the case you can simply use the
C<MOJO_HOME> environment variable.

    % MOJO_HOME=/home/sri/myapp plackup ./script/myapp
    HTTP::Server::PSGI: Accepting connections at http://0:5000/

Some server adapters might ask for a C<.psgi> file, if thats the case you can
just point them at your application script because it will automatically
act like one if it detects the presence of a C<PLACK_ENV> environment
variable.

=head2 Apache/mod_perl (PSGI/Plack)

C<mod_perl> is a good example for a L<PSGI> adapter that is used without
C<plackup>, note that setting the C<PLACK_ENV> environment variable is
required for L<Mojolicious> L<PSGI> detection.

    <VirtualHost *:80>
        ServerName localhost
        DocumentRoot /home/sri/myapp/public

        <Perl>
            $ENV{PLACK_ENV} = 'production';
            $ENV{MOJO_HOME} = '/home/sri/myapp';
        </Perl>

        <Location /myapp>
            SetHandler perl-script
            PerlHandler Plack::Handler::Apache2
            PerlSetVar psgi_app /home/sri/myapp/script/myapp
        </Location>
    </VirtualHost>

=head1 FUN

Hacks that might not be very useful but are fun! :)

=head2 Hello World

If every byte matters this is the smallest C<Hello World> application you can
write with L<Mojolicious::Lite>.

    use Mojolicious::Lite;
    get '/' => {text => 'Hello World!'};
    app->start;

It works because automatic rendering kicks in even if no actual code gets
executed by the router, the renderer just picks up the C<text> value from the
stash and generates a response.

=cut
